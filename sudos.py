from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import os
from dotenv import load_dotenv

# Charger les variables d'environnement depuis un fichier .env (si utilis√© en local)
load_dotenv()

# Remplacer par la variable d'environnement qui contient le token
TOKEN = os.getenv("7569276552:AAHoTt8G8zdY5Amc2WkncVMPmUz-eGmCNmQ")

# V√©rifier si le token est bien r√©cup√©r√©
if TOKEN is None:
    raise ValueError("Le token n'a pas √©t√© trouv√© dans les variables d'environnement.")

# Liste des administrateurs autoris√©s (remplace avec ton ID Telegram)
ADMIN_IDS = [6616189804]  # Remplace par ton propre ID Telegram ou ceux des autres admins

# Dictionnaires pour stocker les options et messages personnalis√©s
options_personnalisees = {
    1: "ùêÄùêÉùêåùêàùêç üòáüí´‚úåÔ∏è",
    2: "ùêÉùêÄùêëùêä ùêñùêÑùêÅ üò≥",
    3: "ùêáùêÄùêÇùêä ùêñùêàùêÖùêà ùêåùêÑùêìùêáùêéùêÉùêÑ üòä",
    4: "ùêáùêÄùêÇùêä ùêñùêáùêÄùêìùêíùêÄùêèùêè ùêêùêë üí´",
    5: "ùêÇùêéùêçùêìùêÄùêÇùêì ùêåùêÑ ùêñùêáùêÄùêìùêíùêÄùêèùêè üó£Ô∏è",
    6: "ùêàùêçùêíùêìùêÄùêãùêãùêÄùêìùêàùêéùêç ùêÉùêÑ ùêäùêÄùêãùêà ùêãùêàùêçùêîùêó ‚ö°üî•",
    7: "ùêîùêçùêÅùêÄùêç ùêñùêáùêÄùêìùêíùêÄùêèùêè ü§©üòã",
    8: "ùêÅùêÄùêç ùêñùêáùêÄùêìùêíùêÄùêèùêè ùêåùêÑùêìùêáùêéùêÉùêÑ ‚úåÔ∏èü§´",
    9: "ùêíùêîùêèùêèùêéùêëùêì üòØüî∞",
    10: "ùêáùêìùêåùêã/ùêÇùêíùêí ùêãùêàùêÑùêç ùêìùêéùêîùêí ùêÑùêç ùêèùêÉùêÖ üèÉ‚Äç‚ôÇÔ∏è",
    11: "ùêÄùêèùêèùêÑùêçùêÉùêëùêÑ ùêã'ùêàùêçùêÖùêéùêëùêåùêÄùêìùêàùêêùêîùêÑ ùêíùêÑùêãùêéùêç ùêíùêîùêÉùêéùêí ü§´",
    12: "ùêÇùêéùêåùêåùêÑùêçùêì ùêàùêçùêíùêìùêÄùêãùêãùêÑùêë ùêíùêêùêãùêåùêÄùêè ü§†",
    13: "ùêÄùêèùêèùêëùêÑùêçùêÉùêëùêÑ ùêãùêÄ ùêèùêëùêéùêÜùêÄùêåùêåùêÄùêìùêàùêéùêç ùêìùêéùêîùêí ùêãùêÄùêçùêÜùêÄùêÜùêÑ üò≥üí´",
    14: "ùêÄùêìùêìùêÄùêêùêîùêÑ ùêñùêÑùêÅ ùêÉùêéùêí",
    15: "ùêáùêÄùêÇùêä ùêèùêáùêéùêçùêÑ ùêÄùêçùêÉ ùêèùêÇ ùêèùêÄùêàùêÉ üî•ü§†",
    16: "ùêáùêÄùêÇùêä ùêÖùêëùêÑùêÑ ùêÖùêàùêëùêÑ ùêèùêáùêàùêíùêáùêàùêçùêÜ üé©",
    17: "ùêáùêÄùêÇùêä ùêÖùêÄùêÇùêÑùêÅùêéùêéùêä ùêèùêáùêàùêíùêáùêàùêçùêÜ üíé",
    18: "ùêáùêÄùêÇùêä ùêÜùêÄùêãùêãùêÑùêëùêàùêÑ ùêèùêáùêàùêíùêáùêàùêÜ üê±",
    19: "ùêáùêÄùêÇùêä ùêìùêÑùêãùêÑùêÜùêëùêÄùêå üòÄ",
    20: "ùêåùêéùêÉùêÑ ùêèùêÄùêòùêÑùêåùêÑùêçùêì ùêÄùêÇùêÇùêÑùêèùêìùêÑùêë üòç"
}
messages_personnalises = {
    1: "Voici les informations pour Sudos.",
    2: "Voici la liste des Admins.",
    3: "Voici les informations des Groupes.",
    4: "Besoin d'aide ? Voici les options disponibles.",
    5: "Acc√©dez aux Param√®tres ici.",
    6: "message √† √©crit ici",
    7: "message √† √©crit ici",
    8: "message √† √©crit ici",
    9: "message √† √©crit ici",
    10: "message √† √©crit ici",
    11: "message √† √©crit ici",
    12: "message √† √©crit ici",
    13: "message √† √©crit ici",
    14: "message √† √©crit ici",
    15: "message √† √©crit ici",
    16: "message √† √©crit ici",
    17: "message √† √©crit ici",
    18: "message √† √©crit ici",
    19: "message √† √©crit ici",
    20: "message √† √©crit ici"
}

# √âtapes de la conversation
CHOISIR_OPTION, SAISIR_MESSAGE = range(2)

# Fonction pour v√©rifier si l'utilisateur est un administrateur
def est_administrateur(user_id):
    return user_id in ADMIN_IDS

# Commande pour d√©marrer le bot
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [[InlineKeyboardButton(name, callback_data=str(key))] for key, name in options_personnalisees.items()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Choisis une option :", reply_markup=reply_markup)

# Commande pour personnaliser les messages des options existantes
async def personnalise(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    if not est_administrateur(user_id):
        await update.message.reply_text("D√©sol√©, vous n'avez pas l'autorisation d'utiliser cette commande.")
        return ConversationHandler.END

    # Affichage des options existantes
    texte_options = "\n".join([f"{key}: {nom}" for key, nom in options_personnalisees.items()])
    await update.message.reply_text(f"Liste des commandes disponibles :\n{texte_options}\n\nChoisissez une option √† personnaliser (ex: 1 pour Sudos):")

    return CHOISIR_OPTION

# Gestion de la s√©lection de l'option
async def choisir_option(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_selection = update.message.text
    try:
        option_num = int(user_selection)
        if option_num in options_personnalisees:
            context.user_data["option_num"] = option_num
            await update.message.reply_text(f"Vous avez choisi '{options_personnalisees[option_num]}'. Entrez le nouveau message pour cette option :")
            return SAISIR_MESSAGE
        else:
            await update.message.reply_text("Num√©ro d'option invalide. Veuillez r√©essayer.")
            return CHOISIR_OPTION
    except ValueError:
        await update.message.reply_text("Veuillez entrer un num√©ro valide.")
        return CHOISIR_OPTION

# Enregistrement du nouveau message pour l'option s√©lectionn√©e
async def saisir_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    new_message = update.message.text
    option_num = context.user_data.get("option_num")
    
    if option_num:
        messages_personnalises[option_num] = new_message
        await update.message.reply_text(f"Le message pour '{options_personnalisees[option_num]}' a √©t√© mis √† jour avec succ√®s !")
    else:
        await update.message.reply_text("Erreur lors de la mise √† jour du message.")

    return ConversationHandler.END

# Commande pour cr√©er une nouvelle option
async def cree(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if not est_administrateur(user_id):
        await update.message.reply_text("D√©sol√©, vous n'avez pas l'autorisation d'utiliser cette commande.")
        return

    # Extraction des arguments pour cr√©er une nouvelle commande
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("Utilisation : /cree <nom_option> <message>")
        return

    nom_option = args[0]
    message_option = ' '.join(args[1:])
    option_id = len(options_personnalisees) + 1  # G√©n√©ration d'un nouvel ID

    # Ajout de l'option
    options_personnalisees[option_id] = nom_option
    messages_personnalises[option_id] = message_option

    await update.message.reply_text(f"Nouvelle option '{nom_option}' ajout√©e avec succ√®s.")

# Fonction pour g√©rer les clics sur les boutons
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    option_number = int(query.data)
    response_message = messages_personnalises.get(option_number, "Message non d√©fini pour cette option.")

    await query.edit_message_text(text=response_message)

# Configuration du bot
def main() -> None:
    application = Application.builder().token(7569276552:AAHoTt8G8zdY5Amc2WkncVMPmUz-eGmCNmQ).build()

    # Commande /start
    application.add_handler(CommandHandler("start", start))

    # Commande /cree pour ajouter une nouvelle option
    application.add_handler(CommandHandler("cree", cree))

    # Gestion des boutons
    application.add_handler(CallbackQueryHandler(button))

    # Conversation handler pour personnaliser les options existantes
    personnalisation_handler = ConversationHandler(
        entry_points=[CommandHandler("personnalise", personnalise)],
        states={
            CHOISIR_OPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, choisir_option)],
            SAISIR_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, saisir_message)],
        },
        fallbacks=[],
    )

    application.add_handler(personnalisation_handler)

    # D√©marrage du bot
    application.run_polling()

if __name__ == "__main__":
    main()
